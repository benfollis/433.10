#!/usr/bin/env python3
# reads the a config file and produces a fauxmo config that
# will expose each socket with names, etc intact
import socket
import json
from ism_io.config.configloader import ConfigLoader

if __name__ == '__main__': # which it will:
       config_loader = ConfigLoader()
       config = config_loader.get_config()
       # fauxmo configs are a json structure, so we'll just build a hash corresponding to that structure and spit it out to stdout
       # first get out IPs, by making an outbound connection and seeing what it was using
       # this is the IP that's likely exposed to the network
       s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
       s.connect(("gmail.com",80))
       my_ip = s.getsockname()[0]
       s.close()
       #our rest urls look like http://<myip>:<port>/<switch_name>/[on/off]
       my_port = str(config["rest"]["port"]) # string form since we'll be concating
       fauxmo_base_port = 18080 # high numbered likely to be unused
       fauxmo_config = { "FAUXMO" :{ "ip_address" : "auto" },
                         "DEVICES" : [],
                         "HOMEASSISTANT" : { "enable" : False } } # ignore homeassistant devices
       for socket_name in config["sockets"]:
              socket_url = "http://{0}:{1}/{2}/".format(my_ip, my_port, socket_name)
              device = { "port" : fauxmo_base_port,
                         "handler" : {
                                "on_cmd" : socket_url + "on",
                                "off_cmd" : socket_url + "off",
                            "method" : "GET"
                         },
                         "description" : socket_name
              }
              fauxmo_config["DEVICES"].append(device)
              fauxmo_base_port += 1

       print(json.dumps(fauxmo_config, sort_keys=True, indent=4, separators=(',', ': ')))


   
